package org.papervision3d.materials.special {	import flash.display.BitmapData;	import flash.utils.Dictionary;	import flash.utils.getDefinitionByName;		import org.papervision3d.core.render.draw.IParticleDrawer;		/**	 * @author Seb Lee-Delisle	 * 	 * version 0.1 of MovieAssetParticleMaterial that uses a reference to a	 * library symbol to create a particle.	 * 	 */	public class MovieAssetParticleMaterial extends MovieParticleMaterial implements IParticleDrawer	{						// TODO create object to store bitmap and spriterectdata (and USECOUNT!!!) for each type of bitmap				public static var movieLibrary : Dictionary = new Dictionary(true); 				//public static var bitmapLibrary : Object = new Object(); 		//public static var spriteRectLibrary : Object = new Object();		//public static var useCount : Object = new Object();				//private var _animated : Boolean; // animated movieclip - FOR FUTURE USE! NOT IMPLEMENTED YET :-) 		//		//private var scaleMatrix:Matrix;		//private var spriteRect:Rectangle;		//private var renderRect:Rectangle; 				//public var createUnique : Boolean = false; 				/**		* The MovieClip that is used as a texture.		*/	//	public var movie :DisplayObject;		/**		* A Boolean value that determines whether the MovieClip is transparent. The default value is true, which, 		* although slower, is usually what you need for particles.		*/		//public var movieTransparent :Boolean;		private var movieAsset : Class;		private var linkageID : String;		//public var allowAutoResize:Boolean = true; // FOR FUTURE USE! 						// __________________________________________________ NEW				/**		 * A Particle material that is made from a single DisplayObject (Sprite, MovieClip, etc) or a		 * Class that extends a DisplayObject (ie a library symbol)		 * 		 * v0.1 - TODO implement reusable assets in the same way as MovieAssetMaterial		 * 		 * @param linkageID		The Library symbol to make the material out of.		 * @param transparent	[optional] - whether the image is transparent or not		 * @param animated		[optional] NOT IMPLEMENTED YET! Please do not use!		 * @param createUnique	If true, we'll make a bitmap especially for use with this instance of the material, otherwise we'll use a cached version (if there is one)		 * 		 */		public function MovieAssetParticleMaterial(linkageID:String, transparent:Boolean = true, animated : Boolean = false, createUnique:Boolean = false)		{												this.linkageID = linkageID; 			this.movieAsset = Class(getDefinitionByName(linkageID)); 						if(!createUnique )			{				if(movieLibrary[movieAsset])				{					movie = movieLibrary[movieAsset];				}				else				{					movie = new movieAsset(); 					movieLibrary[movieAsset] = movie; 				}				//useCount[movieAsset]++; 							}			else			{				movie = new movieAsset(); 							}			 			super(null, transparent, animated, createUnique); 		}				override public function destroy() :void		{			super.destroy(); 						// not sure if we have to do anything extra here? 					}				/*		override public function drawBitmap() : void		{									spriteRect = movie.getBounds(movie); 						if(!bitmap || bitmap.width<spriteRect.width || bitmap.height<spriteRect.height)			{				if(bitmap) bitmap.dispose(); 								bitmap = new BitmapData(movie.width, movie.height, movieTransparent, 0x00000000);							if(!createUnique)				{					bitmapLibrary[movie] = bitmap;					spriteRectLibrary[movie] = spriteRect; 					useCount[movie] = 1; 				} 			}			bitmapDrawMatrix.tx = -spriteRect.left;			bitmapDrawMatrix.ty = -spriteRect.top;			bitmap.fillRect(bitmap.rect, 0x00000000); 			bitmap.draw(movie, bitmapDrawMatrix); 								}				*/					}}